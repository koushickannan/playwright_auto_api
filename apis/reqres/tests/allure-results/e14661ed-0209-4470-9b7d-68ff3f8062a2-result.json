{"name": "test_get_user_by_id", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'tenant_id' in section: 'QA'", "trace": "self = <configparser.ConfigParser object at 0x7f61a53a4df0>, section = 'QA'\noption = 'tenant_id'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n/usr/lib/python3.8/configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/collections/__init__.py:898: in __getitem__\n    return self.__missing__(key)            # support subclasses that define __missing__\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'base_url': 'https://qa-nrp-api.laerdalblr.in', 'bff_url': 'https://qa-nrp-bff.laerdalblr.in', 'nrp_id':...: 'tenant_admin', 'userid': '739', 'storecode': '710', 'langcode': 'en', 'externaluserid': '6889', 'region': 'US'}, {})\nkey = 'tenant_id'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'tenant_id'\n\n/usr/lib/python3.8/collections/__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\ntoken_client = <function token_client.<locals>.create_client at 0x7f61a6e033a0>\ntoken_storage = {'guest_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IjEiLCJ1c2VySWQiOiIxIiwic3RvcmVDb2RlIjoiNzEwIiwi...wiZXhwIjo5NDk1MjM1Mjk2LCJpYXQiOjE3MTkyMzUyOTYsImlzcyI6IjEiLCJzdWIiOiIxIn0.J8VEwYUmPY8RR-hOmyuSDTRwXXGjpOoKs2knPVBwgaY'}\nenv = 'QA'\n\n    @pytest.fixture(scope=\"session\")\n    def tenant_admin_token(token_client, token_storage, env):\n        client = token_client(get_config(env, None, \"base_url\"))\n>       status_code, response = client.create_tenant_admin_token(env)\n\n../../../conftest.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../clients/token_client.py:27: in create_tenant_admin_token\n    token_request = create_tenant_admin_token(env)\n../testdata/token_test_data.py:12: in create_tenant_admin_token\n    tenant_id = get_config(env, None, \"tenant_id\")\n../../../core/utils/config_parser.py:32: in get_config\n    return config.get(env, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x7f61a53a4df0>, section = 'QA'\noption = 'tenant_id'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'tenant_id' in section: 'QA'\n\n/usr/lib/python3.8/configparser.py:792: NoOptionError"}, "description": "Scenarios: Users", "start": 1719235296477, "stop": 1719235296477, "uuid": "e42c037c-176d-49ae-8927-2f5de7904f2a", "historyId": "5546e54a909d5f84cbad84eda6e39804", "testCaseId": "5546e54a909d5f84cbad84eda6e39804", "fullName": "apis.reqres.tests.users_tests.TestUserModules#test_get_user_by_id", "labels": [{"name": "story", "value": "Verify user modules"}, {"name": "epic", "value": "Users"}, {"name": "tag", "value": "dependency"}, {"name": "tag", "value": "reqres"}, {"name": "parentSuite", "value": "apis.reqres.tests"}, {"name": "suite", "value": "users_tests"}, {"name": "subSuite", "value": "TestUserModules"}, {"name": "host", "value": "ldlkoushic-HP-Pavilion-Laptop-13-bb0078TU-Refurb"}, {"name": "thread", "value": "36868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "apis.reqres.tests.users_tests"}]}