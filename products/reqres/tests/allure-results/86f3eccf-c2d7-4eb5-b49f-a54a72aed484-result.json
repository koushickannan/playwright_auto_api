{"name": "test_create_tenant_admin_token[base_url1]", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'base_url1' in section: 'BaseConfig'", "trace": "self = <configparser.ConfigParser object at 0x7efdd876c760>\nsection = 'BaseConfig', option = 'base_url1'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n/usr/lib/python3.8/configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/collections/__init__.py:898: in __getitem__\n    return self.__missing__(key)            # support subclasses that define __missing__\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'base_url': 'https://qa-nrp-api.laerdalblr.in', 'bff_url': 'https://qa-nrp-bff.laerdalblr.in'}, {})\nkey = 'base_url1'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'base_url1'\n\n/usr/lib/python3.8/collections/__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'base_url' for <Function test_create_tenant_admin_token[base_url1]>>\n\n    @pytest.fixture(scope=\"session\", params=[\"base_url1\", \"base_url2\"])\n    def base_url(request) -> str:\n        \"\"\"\n        This fixture provides different base URLs for testing.\n        :param request: pytest fixture for accessing parameterization\n        :return: base URL\n        \"\"\"\n>       return get_config(\"BaseConfig\", request.param)\n\n../../../conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../core/utils/config_parser.py:18: in get_config\n    return config.get(section=section, option=key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x7efdd876c760>\nsection = 'BaseConfig', option = 'base_url1'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'base_url1' in section: 'BaseConfig'\n\n/usr/lib/python3.8/configparser.py:792: NoOptionError"}, "description": "Scenarios: Create token", "parameters": [{"name": "base_url", "value": "'base_url1'"}], "start": 1718693901992, "stop": 1718693901992, "uuid": "7c24a614-9471-4689-888a-ec51eba3076d", "historyId": "fb94209bc90458c64dbdce44bd8bd46d", "testCaseId": "ce75f0bb42f35cb171cc5859ef95014f", "fullName": "products.reqres.tests.token_api_tests.TestTokenModules#test_create_tenant_admin_token", "labels": [{"name": "epic", "value": "Token Generation"}, {"name": "story", "value": "Test token modules"}, {"name": "tag", "value": "dependency"}, {"name": "tag", "value": "reqres"}, {"name": "parentSuite", "value": "products.reqres.tests"}, {"name": "suite", "value": "token_api_tests"}, {"name": "subSuite", "value": "TestTokenModules"}, {"name": "host", "value": "ldlkoushic-HP-Pavilion-Laptop-13-bb0078TU-Refurb"}, {"name": "thread", "value": "52693-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "products.reqres.tests.token_api_tests"}]}